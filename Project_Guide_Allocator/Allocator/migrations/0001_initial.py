# Generated by Django 5.1.6 on 2025-03-13 08:43

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('edu_email', models.EmailField(max_length=254, unique=True)),
                ('mobile_number', models.CharField(max_length=15)),
                ('otp', models.CharField(blank=True, max_length=10, null=True)),
                ('is_registered', models.BooleanField(default=False)),
                ('failed_attempts', models.IntegerField(default=0)),
                ('failed_blocked', models.DateTimeField(blank=True, default=None, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('abbreviation', models.CharField(max_length=10, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='student', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('cgpa', models.DecimalField(decimal_places=2, max_digits=4)),
                ('academic_year', models.IntegerField()),
                ('branch', models.CharField(max_length=100)),
                ('has_backlog', models.BooleanField(default=False)),
                ('has_internship', models.BooleanField(default=False)),
                ('course_type', models.CharField(choices=[('B.Tech', 'Btech'), ('M.Tech', 'Mtech')], default='B.Tech', max_length=14)),
            ],
        ),
        migrations.CreateModel(
            name='AllocationEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_name', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('open', 'Open'), ('locked', 'Locked'), ('closed', 'Closed')], default='open', max_length=6)),
                ('project_type', models.CharField(choices=[('B.Tech', 'Btech'), ('M.Tech Major', 'Mtechmaj'), ('M.Tech Minor', 'Mtechmin')], default='B.Tech', max_length=14)),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
                ('eligible_batch', models.CharField(max_length=255)),
                ('eligible_branch', models.CharField(max_length=255)),
                ('cluster_count', models.IntegerField(default=0)),
                ('for_backlog', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('eligible_faculties', models.ManyToManyField(related_name='eligible_faculty_events', to='Allocator.faculty')),
                ('eligible_students', models.ManyToManyField(blank=True, related_name='eligible_events', to='Allocator.student')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_name', models.CharField(max_length=100)),
                ('users', models.ManyToManyField(blank=True, related_name='roles', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('actions', models.CharField(max_length=1000)),
                ('app_name', models.CharField(max_length=100)),
                ('role', models.ManyToManyField(blank=True, related_name='permissions', to='Allocator.role')),
            ],
        ),
        migrations.CreateModel(
            name='Clashes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cluster_id', models.IntegerField()),
                ('preference_id', models.IntegerField()),
                ('created_datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_processed', models.BooleanField(default=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Allocator.allocationevent')),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Allocator.faculty')),
                ('list_of_students', models.ManyToManyField(related_name='clashing_students', to='Allocator.student')),
                ('selected_student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Allocator.student')),
            ],
        ),
        migrations.CreateModel(
            name='ChoiceList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preference_list', models.JSONField()),
                ('current_index', models.IntegerField(default=1)),
                ('cluster_number', models.IntegerField()),
                ('is_locked', models.BooleanField(default=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Allocator.allocationevent')),
                ('current_allocation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='allocated_choices', to='Allocator.faculty')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Allocator.student')),
            ],
        ),
    ]
